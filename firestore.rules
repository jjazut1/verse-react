rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    function isTeacherOrAdmin() {
      return isTeacher() || isAdmin();
    }
    
    // Helper function to check if request is from a service account
    function isServiceAccount() {
      return request.auth != null && 
             request.auth.token != null && 
             request.auth.token.email != null && 
             request.auth.token.email.matches(".*@verse-11f2d.iam.gserviceaccount.com");
    }
    
    // Allow anyone to read high scores
    match /highScores/{highScoreId} {
      allow read: if true;
      allow create: if 
        // Basic field validation
        request.resource.data.playerName is string &&
        request.resource.data.playerName.size() >= 3 &&
        request.resource.data.playerName.size() <= 12 &&
        request.resource.data.playerName.matches('^[A-Za-z0-9\\s]+$') &&
        
        // Profanity check (case-insensitive)
        !request.resource.data.playerName.lower().matches('.*\\b(ass|fuck|shit|damn|bitch|crap|piss|dick|cock|pussy|whore|slut|bastard)\\b.*') &&
        
        // Score validation
        request.resource.data.score is number &&
        request.resource.data.score >= 0 &&
        request.resource.data.score <= 1000 &&
        request.resource.data.configId is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.gameType is string &&
        
        // Game config validation 
        exists(/databases/$(database)/documents/userGameConfigs/$(request.resource.data.configId)) &&
        (
          // Either the config has share=true and the type matches
          (
            get(/databases/$(database)/documents/userGameConfigs/$(request.resource.data.configId)).data.share == true &&
            get(/databases/$(database)/documents/userGameConfigs/$(request.resource.data.configId)).data.type == request.resource.data.gameType
          )
          ||
          // Or it's a public demo config
          (
            request.resource.data.configId in ['xOoA0q7ILtrdqdJt1ki5', 'Ua17C8DK6ZFsujj9Z1ZC']
          )
        );
    }

    function isValidPlayerName(name) {
      // Only allow alphanumeric characters and spaces
      let nameRegex = "[A-Za-z0-9\\s]+";
      return name.matches(nameRegex);
    }
    
    // Games collection
    match /games/{gameId} {
      allow read: if true;
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Game configurations collection (admin only)
    match /gameConfigs/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User-created game configurations
    match /userGameConfigs/{configId} {
      allow read: if true;
      allow create: if 
        isAuthenticated() &&
        // Basic field validation
        (
          // Sort Categories Egg game validation
          (request.resource.data.type == 'sort-categories-egg' &&
          request.resource.data.title is string &&
          request.resource.data.title.size() > 0 &&
          request.resource.data.eggQty is number &&
          request.resource.data.eggQty > 0 &&
          request.resource.data.categories is list &&
          request.resource.data.categories.size() > 0) ||
          
          // Simple Whack-a-mole validation
          (request.resource.data.type == 'whack-a-mole' &&
          request.resource.data.title is string &&
          request.resource.data.categories is list)
        ) &&
        // Common fields validation
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Assignments collection
    match /assignments/{assignmentId} {
      // Allow service accounts to read/write
      allow read, write: if isServiceAccount();
      
      // Allow anyone to read assignments (needed for the link token functionality)
      // This is more permissive but simpler for now - we could tighten security later
      allow read: if true;
      
      // Allow teachers to create/update/delete
      allow create, update, delete: if isTeacherOrAdmin();
      
      // Allow authenticated students to update assignment status and completion fields
      allow update: if isAuthenticated() && 
        // Only allow updating specific fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completedCount', 'lastCompletedAt']);
    }
    
    // Attempts collection - track student game attempts
    match /attempts/{attemptId} {
      // Allow creating attempts for anyone - students need this when completing assignments
      allow create: if true;
      
      // Only teachers can read attempts (to see student progress)
      allow read: if isTeacherOrAdmin();
      
      // Only the teacher who created the assignment can update/delete attempts
      allow update, delete: if isTeacherOrAdmin();
    }
    
    // Teachers collection
    match /teachers/{teacherId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow write: if isAdmin() || request.auth.uid == userId;
    }
    
    // Sort Categories Egg collection
    match /sortCategoriesEgg/{configId} {
      allow read: if true;
      allow create, update, delete: if true;
    }

    // Blank Game Templates collection
    match /blankGameTemplates/{templateId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Category Templates collection
    match /categoryTemplates/{templateId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
} 